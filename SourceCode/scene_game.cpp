//******************************************************************************
//
//
//      scene_game
//
//
//******************************************************************************

//----< インクルード >-----------------------------------------------------------
#include "all.h"
#include <sstream>

//------< 定数 >----------------------------------------------------------------

//------< 変数 >----------------------------------------------------------------
int game_state = 0;    // 状態
int game_timer = 0;    // タイマー

Sprite* sprGreen;
Sprite* sprPink;
Sprite* sprRed;
Sprite* sprYellow;

//--------------------------------------
//  初期設定
//--------------------------------------
void game_init()
{
    game_state = 0;
    game_timer = 0;
}

//--------------------------------------
//  更新処理
//--------------------------------------
void game_update()
{
    using namespace input;

    switch (game_state)
    {
    case 0:
        //////// 初期設定 ////////
        sprGreen    = sprite_load(L"./Data/Images/tree_green.png");
        sprPink     = sprite_load(L"./Data/Images/tree_pink.png");
        sprRed      = sprite_load(L"./Data/Images/tree_red.png");
        sprYellow   = sprite_load(L"./Data/Images/tree_yellow.png");

        game_state++;
        /*fallthrough*/
    case 1:
        //////// パラメータの設定 ////////
        GameLib::setBlendMode(Blender::BS_ALPHA);

        game_state++;
        /*fallthrough*/
    case 2:
        //////// 通常時 ////////

#if 2
//******************************************************************************
// TODO:02 マウスカーソルの位置を表示させる
//------------------------------------------------------------------------------
/*
課題）
    □ コメントの仕方、外し方を理解する

手順）
    1. 下記の6行分を選択する。
        A. マウスで選択する
            最初はこちらで構いません。            

        B. Shiftを押しながらカーソルの↓で複数行選択していく
            できればこちらで。

    2. 選択された行のコメントを解除する。
        A. ツールバーのテキストエディタの機能から、該当のボタンを押す
            ［プリント参照］

        B. ショートカットを使う（参考まで。ややこしいので覚えなくてOK。）
            Ctrl+K　→　Ctrl+C     コメントにする
            Ctrl+K　→　Ctrl+U     コメントを外す（アンコメント）

        C. 手で//を消す
            これでも構いませんが、できればAの方法を覚えましょう。

    3. プログラムを実行する
        プログラムを実行すると、タイトルバー（ウインドウの上部）にマウスカーソルの
        座標が表示されるようになります。
        この項目はコメントについて学習するための項目なので、プログラムの中身について
        一切考える必要はありません。（ゲームプログラミングⅡに相当する内容です。）
*/
//******************************************************************************
#endif
        //TODO_02 マウスカーソル位置を表示させる
        std::ostringstream oss;                                 // 文字列ストリーム
        POINT point;                                            // 位置用の変数を宣言する
        GetCursorPos(&point);                                   // スクリーン座標を取得する
        ScreenToClient(window::getHwnd(), &point);              // クライアント座標に変換する
        oss << "ゲームプログラミングⅠ" << "(x=" << point.x << " y=" << point.y << ")";
        SetWindowTextA(window::getHwnd(), oss.str().c_str());   // タイトルバーにを表示させる

        break;
    }

    game_timer++;
}

//--------------------------------------
//  描画処理
//--------------------------------------
void game_render()
{
#if 1
    //******************************************************************************
     //TODO:01 ゲーム画面の座標について
    //------------------------------------------------------------------------------
    /*
    課題）
        □ プログラムを起動する。
        □ ゲーム画面の座標について理解する。

    手順）
        1. プログラムを起動する。
            作成したプログラムは Ctrl + F5 で実行する事ができます。（メニューからでも可）
            エスケープキー（一番左上のキー）で終了させる事ができます。

        2. 座標系について理解する。［プリント参照］
            起動したウインドウのクライアント領域の左上が(0, 0)という座標です。
            X軸（横軸）方向は右向きがプラス、Y軸（縦軸）方向は下向きがプラスの値をとります。
            この教材のウインドウはクライアント領域が幅1280、高さ720にしています。
            幅と高さの定義について
                幅　  SCREEN_W（WはWidthの略。ウィッズと発音します）
                高さ  SCREEN_H（HはHeightの略。ハイトと発音します）
                common.hを開いて確認しておくこと。
    */
    //******************************************************************************
#endif

#if 3
//******************************************************************************
// TODO:03 画面をクリアする
//------------------------------------------------------------------------------
/*
課題）
    □ 画面をクリアする関数を呼ぶ

手順）
    1. 下記に GameLib::clear(0.0, 0.0, 0.0); と記述する

    2. 「0.0, 0.0, 0.0」の部分の数値を好きな数値に変更して、動作を確認する。
        数値は左からR:赤、G:緑、B：青を表している。3つの数値で1つの色を表す事ができる。
        画像のソフトなどでは0～255（00～FF）のような256段階で使われる事が多いが、
        プログラミングでは0～1（0.0f～1.0f）までに変換して使う。

        ※参考「カラー選択ツール」 Google chromeで「カラー選択」と検索してみよう！
        　色を選んだらRGBのところの数値を255で割って0.0から1.0fまでに変換しましょう。

    3. このままでは警告が増えてしまうので、それぞれの数値の後ろにfをつける。
        （例：1.0f, 0.5f, 0.0f）
*/
//******************************************************************************
#endif
    //TODO_03 画面をクリアする
    //GmeLib::clear(0.3647f, 0.2588f, 0.9607f);

#if 4
    //******************************************************************************
    // TODO:04 文字の描画
    //------------------------------------------------------------------------------
    /*
    課題）
        画面に文字を描画する

    手順）
        1. text_out関数を確認する。
            下記のtext_out関数にカーソルを合わせて右クリック → 宣言へ移動を選ぶ。
            text_out関数の説明があるので、どういう順番で情報を入力するのかを確認しておく。

        2. 見本を参考に、下記の条件で文字列を表示させよう。（数値が無い箇所は記述不要）
            フォント 文字列                  座標      スケール    色
            1       "Hello ECC!"            0, 16
            2       "ECC comp."             0, 48     3, 3
            3       "Game Programming I"    0, 130    4, 4       1, 0, 0
            4       "ABCDEFG"               0, 178    6, 6       0, 1, 0
            5       "TOKYO GAME SHOW"       0, 298    2.5f, 2.5f 1, 1, 0
            6       "XYZ"                   0, 400    8, 8       0, 0, 1

            ※ 色は画面クリアのように、細かい数値を指定する事もできる。
    */
    //******************************************************************************
#endif

    //TODO_04 文字の描画
    text_out(0, "Hello World", 0, 0);   // 見本
    text_out(1, "Hello ECC!", 0, 16);
    text_out(2, "ECC comp.", 0, 48, 3, 3);
    text_out(3, "Game ProgrammingⅠ", 0, 130, 4, 4, 1, 0, 0);
    text_out(4, "ABCDEFG", 0, 178, 6, 6, 0, 1, 0);
    text_out(5, "TOKYO GAME SHOW", 0, 298, 2.5f, 2.5f, 1, 1, 0);
    text_out(6, "XYZ", 0, 400, 8, 8, 0, 0, 1);

#if 5
    //******************************************************************************
    // TODO:05 text_outのY座標の計算について（優先度：低）
    //------------------------------------------------------------------------------
    /*
    課題）
        □ text_outのY座標を計算できる機能を知っておく
            ※この項目の優先度は低めなので、初回の学習時には後回しにしても構いません。
            （担当の先生の指示に従って下さい）

    手順）
        text_outという命令には、表示した文字の高さを返す機能があります。

        例）
            float y = 0;    // floatは実数を格納できる箱
            y = textout(0, "Hello World", 0, y);
            を実行すると、高さ0のところに文字が描画され、その後にyに16が入ります。

            同じように、
            y = y + textout(1, "Hello ECC!", 0, y);

            さらに、
            y += textout(2, "ECC comp", 0, y, 3, 3);

            のように書いていけます。
            TODO_04のソースコードを、全てこの形で書き直してみなさい。
    */
    //******************************************************************************
#endif

#if 6
//******************************************************************************
// TODO:06 基本図形（プリミティブ）の描画
//------------------------------------------------------------------------------
/*
課題）
    □ 画面に基本図形（プリミティブ）を描画する

手順）
    1. primitive::line関数を使用する
        始点の位置   終点の位置   色              太さ
        0, 0        640, 360
        100, 0      720, 360    1, 0, 0（4番目は省略可）
        200, 0      820, 360    0, 1, 1, 1      10

    2. primitive::rect関数を使用する（基準点は、まだ気にしなくて良い）
        位置        大きさ       基準点     角度              色
        100, 100    300, 200
        100, 300    200, 100    0, 0       ToRadian(45)
        400, 300    500, 100    0, 0       ToRadian(-30)    0.3f, 1.0f, 0.4f

    3. primitive::circle関数を使用する
        位置          半径   スケール    角度             色
        250, 200      60    1, 1        ToRadian(0)     1, 0, 0
        1100, 200     150   1, 0.5f     ToRadian(30)    0, 1, 1
*/
//******************************************************************************
#endif
    //TODO_06 基本図形（プリミティブ）
    //1. primitive::line
    //線を引く
    primitive::line(0, 0, 640, 360);
    primitive::line(100, 0, 720, 360, 1, 0, 0, 10);


    //2. primitive::rect
    //箱を作る
    primitive::rect(100, 100, 300, 200);
    primitive::rect(100, 300, 200, 100, 0, 0, ToRadian(45));
    primitive::rect(400, 300, 500, 100, 0, 0, ToRadian(-30), 0.3f, 1.0f, 0.4f);



    //3. primitive::circle
    //円を作る
    primitive::circle(250, 200, 60, 1, 1, ToRadian(0), 1, 0, 0);
    primitive::circle(1100, 200, 150, 1, 0.5f, ToRadian(30), 0, 1, 1);

#if 7
//******************************************************************************
// TODO:07 スプライト（画像を表示する機能のこと）による描画
//------------------------------------------------------------------------------
/*
課題）
    □ 画面を一度クリアする。
    □ 地形を描画する。（プリミティブで）
    □ 木のスプライトを描画する。
    □ 木をY軸方向にソートする。

手順）
    1. 画面を一度クリアする
        GameLib::clearを使用する。色の指定は 0.4f, 0.3f, 1.0f

    2．地形と月を描画する（プリミティブ）
        primitive::circleを使用する。
            位置          半径   スケール    角度             色                       何角形か
            640, 180      180   1, 1        ToRadian(0)     0.9f, 0.8f, 0.3f
            640, 1200     800   1, 1        ToRadian(0)     0.1f, 0.8f, 0.5f, 1.0f   64

    3. 木のスプライトを描画する
        sprite_renderを使用する。
            スプライト   位置
            sprGreen    200, 500
            sprGreen    500, 450
            sprGreen    400, 300
            sprGreen    900, 450

            sprRed      900, 500
            sprRed      300, 450
            sprRed      600, 500
            sprRed      700, 450

            sprPink     500, 400
            sprPink     200, 350
            sprPink     700, 400
            sprPink     800, 350

            sprYellow   100, 400
            sprYellow   600, 250

        ※必ずここで実行して結果を確認しておくこと

    4. 木をY軸方向にソートする
        3.で描画した木を、yの値が小さい順に並べ替えなさい。（コピーペーストで切り貼りする）
*/
//******************************************************************************
#endif
    //TODO_07 スプライトによる描画
    //1. 画面を一度クリア
    GameLib::clear(0.4f, 0.3f, 1.0f);

    //2. 地形と月を描画する（プリミティブ）

    //アンパンマン
    primitive::circle(640, 180, 180, 1, 1,  ToRadian(0), 0.9f, 0.8f, 0.3f);
    primitive::circle(540, 200, 60, 1, 1, ToRadian(0), 1, 0, 0);
    primitive::circle(740, 200, 60, 1, 1, ToRadian(0), 1, 0, 0);
    primitive::circle(640, 200, 60, 1, 1, ToRadian(0), 1, 0, 0);
    primitive::circle(580, 90, 20, 1, 0.5f, ToRadian(90), 1, 1, 1);
    primitive::circle(690, 90, 20, 1, 0.5f, ToRadian(90), 1, 1, 1);

    //丘
    primitive::circle(640, 1200, 800, 1, 1, ToRadian(0), 0.1f, 0.8f, 0.5f, 1.0f, 64);


    //3. 木のスプライトを描画する
    //木
    sprite_render(sprRed, 300, 450);
    sprite_render(sprYellow, 100, 400);
    sprite_render(sprYellow, 600, 250);
    sprite_render(sprGreen, 400, 300);
    sprite_render(sprPink, 500, 400);
    sprite_render(sprPink, 200, 350);
    sprite_render(sprPink, 700, 400);
    sprite_render(sprPink, 800, 350);
    sprite_render(sprGreen, 200, 500);
    sprite_render(sprGreen, 500, 450);
    sprite_render(sprGreen, 900, 450);
    sprite_render(sprRed, 700, 450);
    sprite_render(sprRed, 900, 500);
    sprite_render(sprRed, 600, 500);
    
    


}

//--------------------------------------
//  終了処理
//--------------------------------------
void game_deinit()
{
    safe_delete(sprYellow);
    safe_delete(sprRed);
    safe_delete(sprPink);
    safe_delete(sprGreen);
}
